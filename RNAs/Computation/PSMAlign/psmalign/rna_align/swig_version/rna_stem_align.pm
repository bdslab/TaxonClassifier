# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package rna_stem_align;
use base qw(Exporter);
use base qw(DynaLoader);
package rna_stem_alignc;
bootstrap rna_stem_align;
package rna_stem_align;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package rna_stem_align;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package rna_stem_align;

*align_stem = *rna_stem_alignc::align_stem;

############# Class : rna_stem_align::vector_i ##############

package rna_stem_align::vector_i;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rna_stem_align );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rna_stem_alignc::new_vector_i(@_);
    bless $self, $pkg if defined($self);
}

*size = *rna_stem_alignc::vector_i_size;
*empty = *rna_stem_alignc::vector_i_empty;
*clear = *rna_stem_alignc::vector_i_clear;
*push = *rna_stem_alignc::vector_i_push;
*pop = *rna_stem_alignc::vector_i_pop;
*get = *rna_stem_alignc::vector_i_get;
*set = *rna_stem_alignc::vector_i_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rna_stem_alignc::delete_vector_i($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rna_stem_align::vector_i2 ##############

package rna_stem_align::vector_i2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rna_stem_align );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rna_stem_alignc::new_vector_i2(@_);
    bless $self, $pkg if defined($self);
}

*size = *rna_stem_alignc::vector_i2_size;
*empty = *rna_stem_alignc::vector_i2_empty;
*clear = *rna_stem_alignc::vector_i2_clear;
*push = *rna_stem_alignc::vector_i2_push;
*pop = *rna_stem_alignc::vector_i2_pop;
*get = *rna_stem_alignc::vector_i2_get;
*set = *rna_stem_alignc::vector_i2_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rna_stem_alignc::delete_vector_i2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rna_stem_align::vector_s ##############

package rna_stem_align::vector_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rna_stem_align );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rna_stem_alignc::new_vector_s(@_);
    bless $self, $pkg if defined($self);
}

*size = *rna_stem_alignc::vector_s_size;
*empty = *rna_stem_alignc::vector_s_empty;
*clear = *rna_stem_alignc::vector_s_clear;
*push = *rna_stem_alignc::vector_s_push;
*pop = *rna_stem_alignc::vector_s_pop;
*get = *rna_stem_alignc::vector_s_get;
*set = *rna_stem_alignc::vector_s_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rna_stem_alignc::delete_vector_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rna_stem_align::vector_s2 ##############

package rna_stem_align::vector_s2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rna_stem_align );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rna_stem_alignc::new_vector_s2(@_);
    bless $self, $pkg if defined($self);
}

*size = *rna_stem_alignc::vector_s2_size;
*empty = *rna_stem_alignc::vector_s2_empty;
*clear = *rna_stem_alignc::vector_s2_clear;
*push = *rna_stem_alignc::vector_s2_push;
*pop = *rna_stem_alignc::vector_s2_pop;
*get = *rna_stem_alignc::vector_s2_get;
*set = *rna_stem_alignc::vector_s2_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rna_stem_alignc::delete_vector_s2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package rna_stem_align;

1;
